import asyncio
import random
import time
import aiohttp
import uvicorn
import os
import logging
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from fastapi import FastAPI
from contextlib import asynccontextmanager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("ChannelPosterBot")

BOT_TOKEN = "7783817301:AAFxS4fXUTe9Q34NrP8110yvzZeBNIMmui4"
CHANNELS = [
    "@deepseek_openai_claude",
    "@gpt_deepseek_claude",
    "@gptdalle3",
    "@gptchatdalle",
    "@gpt_deepseek_openai",
    "@gemini_stable_diffusion"
]

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ö–µ—à—Ç–µ–≥–æ–≤
NEURAL_TAGS = [
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ AI —Ç–µ–≥–∏
    "#AI", "#ArtificialIntelligence", "#MachineLearning", "#DeepLearning", 
    "#NeuralNetwork", "#AIGenerated", "#AIArt", "#AIVision", "#AIMusic", 
    "#AIText", "#AIChat", "#AIModel", "#AIFuture", "#DeepFake", "#GANArt", 
    "#LLM", "#AIVideo", "#AIVoice", "#GenerativeAI", "#AIDesign",
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏
    "#ChatGPT", "#GPT4", "#GPT5", "#Midjourney", "#DALLE3", "#StableDiffusion", 
    "#Gemini", "#Claude", "#OpenAI", "#DeepSeek", "#GeminiPro", "#Anthropic",
    
    # –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ —Ç–µ–≥–∏
    "#–ò–ò", "#–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", "#–ù–µ–π—Ä–æ—Å–µ—Ç–∏", "#–ù–µ–π—Ä–æ—Å–µ—Ç—å", "#–ß–∞—Ç–ì–ü–¢", 
    "#–ú–∏–¥–∂–æ—Ä–Ω–∏", "#–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π–ò–ò", "#–ù–µ–π—Ä–æ–•—É–¥–æ–∂–Ω–∏–∫", "#–ù–µ–π—Ä–æ–ì—Ä–∞—Ñ–∏–∫–∞", 
    "#–ù–µ–π—Ä–æ–¢–µ–∫—Å—Ç", "#–ù–µ–π—Ä–æ–ú–µ–¥–∏–∞", "#–ò–ò–ë—É–¥—É—â–µ–µ", "#–ì–ü–¢", "#–ò–ò–ü–æ–º–æ—â–Ω–∏–∫",
    "#–ì–ª—É–±–æ–∫–æ–µ–û–±—É—á–µ–Ω–∏–µ", "#–ù–µ–π—Ä–æ–î–∏–∑–∞–π–Ω", "#–ù–µ–π—Ä–æ–ö—Ä–µ–∞—Ç–∏–≤", "#–ò–ò–ê—Ä—Ç"
]

F4F_TAGS = [
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    "#F4F", "#FollowForFollow", "#FollowBack", "#LikeForLike", "#Sub4Sub",
    "#FollowTrain", "#FollowMe", "#FollowHer", "#FollowHim", "#FollowAll",
    "#Followers", "#FollowUs", "#Follower", "#F4FInstagram", "#F4FLike",
    "#F4FAlways", "#F4FCommunity", "#Follow4Follow", "#FollowForFollowBack",
    "#Like4Like", "#Like4Likes", "#Sub4Subs", "#Follow4Follows",
    
    # –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ —Ç–µ–≥–∏
    "#–í–∑–∞–∏–º–Ω—ã–π–§–æ–ª–ª–æ–≤–∏–Ω–≥", "#–ü–æ–¥–ø–∏—Å–∫–∞–ó–∞–ü–æ–¥–ø–∏—Å–∫—É", "#–õ–∞–π–∫–ó–∞–õ–∞–π–∫", "#–§4–§", 
    "#–í–∑–∞–∏–º–æ–ø–æ–¥–ø–∏—Å–∫–∞", "#–ü–æ–¥–ø–∏—à–∏—Å—å–ò—è–ü–æ–¥–ø–∏—à—É—Å—å", "#–í–∑–∞–∏–º–Ω—ã–µ–ü–æ–¥–ø–∏—Å–∫–∏", 
    "#–ü–æ–¥–ø–∏—Å–∫–∞–ù–∞–ü–æ–¥–ø–∏—Å–∫—É", "#–ü–æ–¥–ø–∏—à–µ–º—Å—è", "#–§–æ–ª–ª–æ–≤–∏–Ω–≥", "#–ü–æ–¥–ø–∏—à–∏—Å—å–û—Ç–º–µ—á–∞–π", 
    "#–ü–æ–¥–ø–∏—à–∏—Å—å–ù–µ–ü–æ–∂–∞–ª–µ–µ—à—å", "#–ü–æ–¥–ø–∏—Å–∫–∞–í–∑–∞–º–µ–Ω", "#–ü–æ–¥–ø–∏—à–∏–º—Å—è–í–∑–∞–∏–º–Ω–æ", 
    "#–ü–æ–¥–ø–∏—à–∏—Å—å–ò—è–í–µ—Ä–Ω—É", "#–ü–æ–¥–ø–∏—à–∏—Å—å–ê–∫—Ç–∏–≤–Ω—ã–π", "#–ü–æ–¥–ø–∏—à–∏—Å—å–ë—É–¥—å–î—Ä—É–≥–æ–º",
    "#–í–∑–∞–∏–º–Ω–æ", "#–ü–æ–¥–ø–∏—Å–∫–∞", "#–õ–∞–π–∫–∏", "#–ü–æ–¥–ø–∏—Å—á–∏–∫–∏"
]

ENTERTAINMENT_TAGS = [
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    "#Fun", "#Memes", "#Humor", "#Entertainment", "#Laugh", "#Joke", 
    "#Comedy", "#Viral", "#Trending", "#Daily", "#LOL", "#Hilarious", 
    "#FunnyVideos", "#FunnyPics", "#FunnyPosts", "#Jokes", "#DankMemes",
    "#MemesDaily", "#Entertaining", "#Entertain", "#Trend", "#Trends",
    "#ViralPost", "#ViralMemes", "#ViralVideo", "#ViralContent",
    "#DailyMemes", "#DailyFun", "#DailyJokes", "#LaughOutLoud", "#LMAO",
    
    # –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ —Ç–µ–≥–∏
    "#–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "#–Æ–º–æ—Ä", "#–ú–µ–º—ã", "#–°–º–µ—à–Ω–æ", "#–ü—Ä–∏–∫–æ–ª—ã", "#–†–∂–∞–∫–∞", 
    "#–í–µ—Å–µ–ª—å–µ", "#–°–º–µ—Ö", "#–£–≥–∞—Ä", "#–ú–µ–º—ã–î–Ω—è", "#–¢—Ä–µ–Ω–¥—ã", "#–í–∏—Ä—É—Å", 
    "#–í–∞–π–Ω–µ—Ä—ã", "#–°–º–µ—à–Ω—ã–µ–í–∏–¥–µ–æ", "#–°–º–µ—à–Ω—ã–µ–ö–∞—Ä—Ç–∏–Ω–∫–∏", "#–ü—Ä–∏–∫–æ–ª", 
    "#–ê–Ω–µ–∫–¥–æ—Ç—ã", "#–ó–∞–ª–∏–ø–∞—Ç–µ–ª—å–Ω–æ", "#–£–≥–∞—Ä–Ω–æ", "#–Æ–º–æ—Ä–æ–∫", "#–û—Ç–¥–æ—Ö–Ω–∏", 
    "#–ü–æ—Å–º–µ–µ–º—Å—è", "#–£–ª—ã–±–Ω–∏—Å—å", "#–ü–æ–∑–∏—Ç–∏–≤", "#–°–º–µ—à–Ω—ã–µ–ò—Å—Ç–æ—Ä–∏–∏",
    "#–¢–∏–∫–¢–æ–∫", "#–†–µ–∞–∫—Ü–∏–∏", "#–ü—Ä–∞–Ω–∫–∏", "#–ö–í–ù", "#–°—Ç–µ–Ω–¥–∞–ø"
]

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)

def generate_hashtags():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ 10 —Ö–µ—à—Ç–µ–≥–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–±—Ä–æ—Å–æ–º"""
    # –û—Ç–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ —Å —Ä–∞–∑–Ω–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é
    neural_tags = (
        random.sample(NEURAL_TAGS[:15], 2) +  # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
        random.sample(NEURAL_TAGS[15:30], 2) +  # –°—Ä–µ–¥–Ω—è—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        random.sample(NEURAL_TAGS[30:], 1)  # –ú–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
    )
    
    f4f_tags = (
        random.sample(F4F_TAGS[:10], 1) +  # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
        random.sample(F4F_TAGS[10:20], 1) +  # –°—Ä–µ–¥–Ω—è—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        random.sample(F4F_TAGS[20:], 1)  # –ú–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
    )
    
    entertainment_tags = (
        random.sample(ENTERTAINMENT_TAGS[:15], 2) +  # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
        random.sample(ENTERTAINMENT_TAGS[15:30], 1) +  # –°—Ä–µ–¥–Ω—è—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        random.sample(ENTERTAINMENT_TAGS[30:], 1)  # –ú–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
    )
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏
    all_tags = neural_tags + f4f_tags + entertainment_tags
    random.shuffle(all_tags)
    
    return ' '.join(all_tags[:10])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–≥–æ–≤

def create_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø–æ—Å—Ç–æ–º"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É ‚û°Ô∏è", url="https://t.me/NeuroAlliance_bot")
    return keyboard.as_markup()

def generate_post():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"""
    bot_link = "https://t.me/NeuroAlliance_bot"
    
    return (
        f"<b>‚ú® –ë–ï–°–ü–õ–ê–¢–ù–´–ô –î–û–°–¢–£–ü –ö –ú–û–©–ù–´–ú –ù–ï–ô–†–û–°–ï–¢–Ø–ú!</b>\n\n"
        f"‚ö°Ô∏è <b>ChatGPT</b> –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ <b>Midjourney</b> –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        f"—É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä—è–º–æ –≤ Telegram!\n\n"
        f"üî• <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        f"‚Ä¢ <b>100% –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> - –Ω–∏–∫–∞–∫–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
        f"‚Ä¢ <b>–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b> - –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å—Ä–∞–∑—É\n"
        f"‚Ä¢ <b>–†–∞–±–æ—Ç–∞–µ—Ç –≤ Telegram</b> - –Ω–µ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        f"‚Ä¢ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ</b> - –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        f"üé® –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–µ–∫—Å—Ç—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–¥–µ–∏ - –≤—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!\n\n"
        f"üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>\n"
        f"‚Ä¢ <a href='{bot_link}'>ChatGPT</a> - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤\n"
        f"‚Ä¢ <a href='{bot_link}'>Midjourney</a> - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        f"‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è <b><a href='{bot_link}'>–î–û–°–¢–£–ü –ö–û –í–°–ï–ú –ù–ï–ô–†–û–°–ï–¢–Ø–ú</a></b> ‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è\n\n"
        f"<i>#{random.choice(['–∞–∫—Ç—É–∞–ª—å–Ω–æ', '–Ω–æ–≤–∏–Ω–∫–∞', '—Ç—Ä–µ–Ω–¥', '–≥–æ—Ä—è—á–µ–µ'])} "
        f"{generate_hashtags()}</i>\n\n"
        f"<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá</i>"
    )

async def post_to_channels():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç—ã –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã"""
    keyboard = create_keyboard()
    
    for channel in CHANNELS:
        try:
            post_text = generate_post()
            await bot.send_message(
                chat_id=channel,
                text=post_text,
                reply_markup=keyboard,
                disable_web_page_preview=True,
                parse_mode="HTML"
            )
            logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {channel}")
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {channel}: {str(e)}")

async def scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã"""
    while True:
        try:
            await post_to_channels()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {str(e)}")
        
        await asyncio.sleep(60)  # 3 –º–∏–Ω—É—Ç—ã = 180 —Å–µ–∫—É–Ω–¥

async def self_pinger():
    """–†–µ–≥—É–ª—è—Ä–Ω—ã–µ ping-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–Ω–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    RENDER_APP_URL = os.getenv("RENDER_APP_URL", "https://aibotspam.onrender.com/")
    while True:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(RENDER_APP_URL, timeout=10) as response:
                    logger.info(f"üîÑ Self-ping status: {response.status}")
        except Exception as e:
            logger.error(f"‚ùå Self-ping failed: {str(e)}")
        await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    asyncio.create_task(scheduler())
    asyncio.create_task(self_pinger())
    
    logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
    yield
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    logger.info("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await bot.session.close()
    logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(lifespan=lifespan)

@app.get("/")
async def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return {
        "status": "active",
        "service": "Telegram Channel Poster",
        "version": "1.0",
        "channels": CHANNELS,
        "interval": "3 minutes"
    }

@app.get("/ping")
async def ping():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–∞"""
    return {"status": "pong"}

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ Render.com
    port = int(os.environ.get("PORT", 8000))
    host = "0.0.0.0"
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    
    uvicorn.run(
        app,
        host=host,
        port=port,
        workers=1,
        loop="asyncio",
        timeout_keep_alive=60
    )
